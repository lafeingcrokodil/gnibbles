// Generated by CoffeeScript 1.9.1
(function() {
  var Screen,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Screen = (function() {
    function Screen(canvas, numRows, numCols, tileSize) {
      this.numRows = numRows;
      this.numCols = numCols;
      this.tileSize = tileSize;
      this.displayLevel = bind(this.displayLevel, this);
      this.display = bind(this.display, this);
      this.getY = bind(this.getY, this);
      this.getX = bind(this.getX, this);
      this.context = canvas.getContext('2d');
      this.width = canvas.width = this.numCols * this.tileSize;
      this.height = canvas.height = this.numRows * this.tileSize + 1;
    }

    Screen.prototype.getX = function(col) {
      return col * this.tileSize;
    };

    Screen.prototype.getY = function(row) {
      return (row + 1) * this.tileSize;
    };

    Screen.prototype.display = function(char, row, col) {
      this.context.clearRect(this.getX(col), this.getY(row - 1) + 1, this.tileSize, this.tileSize);
      switch (char) {
        case '@':
          this.context.fillStyle = 'green';
          return this.context.fillRect(this.getX(col) + 1, this.getY(row - 1) + 2, this.tileSize - 2, this.tileSize - 2);
        case '-':
        case '|':
        case '+':
          this.context.fillStyle = 'red';
          return this.context.fillRect(this.getX(col) + 1, this.getY(row - 1) + 2, this.tileSize - 2, this.tileSize - 2);
        case 'F':
          this.context.fillStyle = 'yellow';
          return this.context.fillRect(this.getX(col) + 1, this.getY(row - 1) + 2, this.tileSize - 2, this.tileSize - 2);
      }
    };

    Screen.prototype.displayLevel = function(level) {
      var char, i, j, k, len, results, row;
      results = [];
      for (i = k = 0, len = level.length; k < len; i = ++k) {
        row = level[i];
        results.push((function() {
          var l, len1, results1;
          results1 = [];
          for (j = l = 0, len1 = row.length; l < len1; j = ++l) {
            char = row[j];
            results1.push(this.display(char, i, j));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return Screen;

  })();

  $(document).ready(function() {
    var socket;
    socket = io();
    socket.on('level', function(data) {
      var screen;
      screen = new Screen($('canvas')[0], data.numRows, data.numCols, data.tileSize);
      $('canvas').css('display', 'block');
      screen.displayLevel(data.tiles);
      return socket.on('display', function(arg) {
        var char, col, row;
        char = arg.char, row = arg.row, col = arg.col;
        return screen.display(char, row, col);
      });
    });
    return $(document).keydown(function(e) {
      socket.emit('key', e.which);
      return e.preventDefault();
    });
  });

}).call(this);
